[gd_scene load_steps=5 format=2]

[ext_resource path="res://assets/backgrounds/bg4.jpg" type="Texture" id=1]
[ext_resource path="res://nodes/fx/TransitionNode.gd" type="Script" id=3]

[sub_resource type="Shader" id=1]
resource_local_to_scene = true
code = "shader_type canvas_item;

// The amplitude of the wave.
uniform float waveAmplitude: hint_range(0.0, 1.0) = 0.25;
// If true corrects the Vertexes to adjust for the UV displacement
uniform bool correctVertex = true;
// The frequency of the wave.
uniform float waveFrequency: hint_range(0.0, 100.0) = 10.0;
// If true the texture waves vertically otherwise horizontally.
uniform bool verticalWave = true;
// If true the sprite will deform to match the waves, otherwise we keep the background color clamped.
uniform bool keepTransparency = true;
// If true the TIME constant is used, otherwise progress is used to move the wave.
uniform bool useTime = true;
// If useTime is true then use this as a multiplier for the wave speed.
uniform float waveSpeed: hint_range(0.0, 100.0) = 1.0;
// If useTime is false then use this as a multiplier for the wave progress.
uniform float progress: hint_range(0.0, 1.0) = 0.0;
// How much of the left or top half of the texture is modified.
uniform float firstHalf: hint_range(0.0, 1.0) = 0.5;
// How much of the right or bottom half of the texture is modified.
uniform float secondHalf: hint_range(0.0, 1.0) = 0.5;
// Keeps one half stuck. Useful for things like flags.
uniform bool freezeFirstHalf = false;
// Keeps one half stuck. Useful for things like flags.
uniform bool freezeSecondHalf = false;

void vertex() {
	if (correctVertex) {
		VERTEX = (verticalWave ? vec2(VERTEX.x, VERTEX.y * (1.0 + waveAmplitude)): vec2(VERTEX.x * (1.0 + waveAmplitude), VERTEX.y));
	}
}

void fragment() {
	vec2 uv = UV;
	float waveUv = (verticalWave ? uv.x : uv.y);
	float againstWaveUv = (verticalWave ? uv.y: uv.x);
	float freezeFactor = 1.0;
	if (freezeFirstHalf) {freezeFactor = waveUv;} else if (freezeSecondHalf) {freezeFactor = 1.0 - waveUv;}
	if (againstWaveUv < firstHalf || againstWaveUv > 1.0 - secondHalf) {
		float wave;
		// Progress based on time or progress variable.
		if (useTime) {
			wave = freezeFactor * sin(waveUv * waveFrequency + TIME * waveSpeed) * (waveAmplitude / 4.0);
		} else {
			wave = freezeFactor * sin(waveUv * waveFrequency + progress * 2.0 * 3.14) * (waveAmplitude / 4.0);
		}
		vec2 aspect = vec2(TEXTURE_PIXEL_SIZE.x / TEXTURE_PIXEL_SIZE.y, 1.0);
	    vec2 center = 0.5 * aspect;
		// Wave the UV.
		uv -= center;
		if (verticalWave) {
		    uv.y += wave;
			uv.y += uv.y * waveAmplitude;
		} else {
		    uv.x += wave;
			uv.x += uv.x * waveAmplitude;
		}
		uv += center;
		// Clamp the UVs to prevent texture wrapping.
		uv = clamp(uv, vec2(0.0), vec2(1.0));
		againstWaveUv = (verticalWave ? uv.y : uv.x);
		vec4 texColor = texture(TEXTURE, uv);
		// Apply the calculated color.
		if (keepTransparency) {
			if (againstWaveUv <= 0.0 || againstWaveUv >= 1.0) {
				COLOR.a = 0.0;
			} else {
				COLOR = texColor;
			}
		} else {
			COLOR = texColor;
		}
	}
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/waveAmplitude = 0.044
shader_param/correctVertex = true
shader_param/waveFrequency = 21.519
shader_param/verticalWave = true
shader_param/keepTransparency = true
shader_param/useTime = true
shader_param/waveSpeed = 2.852
shader_param/progress = 0.0
shader_param/firstHalf = 0.5
shader_param/secondHalf = 0.5
shader_param/freezeFirstHalf = false
shader_param/freezeSecondHalf = false

[node name="TransitionNode" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 3 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = 5

[node name="TextureRect2" type="TextureRect" parent="CanvasLayer"]
modulate = Color( 0.262745, 0, 0, 1 )
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -72.0
margin_top = -99.0
margin_right = 189.0
margin_bottom = 48.0
texture = ExtResource( 1 )
expand = true

[node name="Tween" type="Tween" parent="."]
